{"version":3,"sources":["components/Form.js","components/Result.js","components/App.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","onSubmit","submit","type","value","placeholder","onChange","change","Result","_props$weather","weather","temp","date","city","sunrise","sunset","pressure","wind","err","content","sunriseTime","Date","toLocaleTimeString","sunsetTime","Fragment","className","concat","App","state","handleInputChange","e","preventDefault","_this","setState","target","prevProps","prevState","_this2","this","length","API","fetch","then","response","ok","Error","json","data","toLocaleString","main","sys","speed","catch","console","log","components_Form","handleCitySubmit","src_components_Result","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.50d31287.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Form = (props) => {\r\n  return (\r\n    <form onSubmit={props.submit}>\r\n      <input type=\"text\" value={props.value} placeholder=\"wpisz miasto\" onChange={props.change} />\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Form","import React from 'react';\r\nimport './Result.css'\r\n\r\nconst Result = (props) => {\r\n\r\n  const { temp, date, city, sunrise, sunset, pressure, wind, err } = props.weather;\r\n  let content = null;\r\n\r\n  const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString()\r\n  const sunsetTime = new Date(sunset * 1000).toLocaleTimeString()\r\n\r\n  if (!err && city) {\r\n    content = (\r\n      <>\r\n        <h3>Wyniki wyszukiwania dla <em>{city}</em></h3>\r\n        <h4>Dane dla dnia i godziny: {date}</h4>\r\n        <h4>Aktualna temperatura: {temp}&#176;C</h4>\r\n        <h4>Wschód słońca dziś o: {sunriseTime}</h4>\r\n        <h4>Zachód słońca dziś o: {sunsetTime}</h4>\r\n        <h4>Ciśnienie to: {pressure} hPa</h4>\r\n        <h4>Aktualna siła wiatru to: {wind} m/s</h4>\r\n      </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"result\">\r\n        {err ? `Nie mamy w bazie miasta ${city}` : content}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Result;","import React, { Component } from 'react';\nimport './App.css';\nimport Form from './Form.js';\nimport Result from './Result.js';\n\n//Klucz API openweathermap.org\nconst APIkey = '000205da0ce3c12b24fadaaf11e3f6ac'\n\nclass App extends Component {\n  state = {\n    value: '',\n    date: '',\n    city: '',\n    sunrise: '',\n    sunset: '',\n    temp: '',\n    pressure: '',\n    wind: '',\n    err: false\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n\n    if (this.state.value.length <= 2) return null\n    if (prevState.value !== this.state.value) {\n      const API = `http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=${APIkey}&units=metric`;\n\n      fetch(API)\n        .then(response => {\n          if (response.ok) {\n            return response\n          }\n          throw Error(\"Nie udało się\")\n        })\n        .then(response => response.json())\n        .then(data => {\n          const date = new Date().toLocaleString()\n          this.setState(prevState => ({\n            err: false,\n            pressure: data.main.pressure,\n            temp: data.main.temp,\n            date: date,\n            sunrise: data.sys.sunrise,\n            sunset: data.sys.sunset,\n            wind: data.wind.speed,\n            city: prevState.value,\n          }))\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState(prevState => ({\n            err: true,\n            city: prevState.value\n          }))\n        })\n    }\n  }\n\n  handleInputChange = (e) => {\n    e.preventDefault();\n    this.setState({\n      value: e.target.value\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Form value={this.state.value}\n          change={this.handleInputChange}\n          submit={this.handleCitySubmit}\n        />\n        {this.state.value.length < 3 ? null : <Result weather={this.state} />}\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}